#include <stdio.h>
#include<stdlib.h>

typedef int element;

typedef struct TreeNode
{
    element key;
    struct TreeNode* left,* right;

}TreeNode;

TreeNode* insertNode(TreeNode* root, int e)
{
    if(root == NULL)
    {
        TreeNode * node = (TreeNode*)malloc(sizeof(TreeNode));
        node->key = e;
        node->left = NULL;
        node->right = NULL;
        return node;
    }
    else if (root->key > e)
        root->left = insertNode(root->left, e);
    else
        root->right = insertNode(root->right, e);
    
    return root;

}

void preOrder(TreeNode* root)
{
    if(root != NULL)
    {
        printf("[%d] ", root->key);
        preOrder(root->left);
        preOrder(root->right);
    }
}

void inOrder(TreeNode* root)
{
    if(root != NULL)
    {
        inOrder(root->left);
        printf("[%d] ", root->key);
        inOrder(root->right);
    }
}

void postOrder(TreeNode* root)
{
    if(root != NULL)
    {
        postOrder(root->left);
        postOrder(root->right);
        printf("[%d] ", root->key);
        
    }
}
TreeNode* findnode(TreeNode* root, int e)
{
    if(root->key > e)
        root = findnode(root->right, e);
    else if ( root->key < e)
        root = findnode(root->right, e);

    return root;
}

int main(void)
{
    TreeNode* root = NULL;

    root = insertNode(root, 35);
    root = insertNode(root, 68);
    root = insertNode(root, 99);
    root = insertNode(root, 18);
    root = insertNode(root, 7);
    root = insertNode(root, 3);
    root = insertNode(root, 12);
    root = insertNode(root, 26);
    root = insertNode(root, 22);
    root = insertNode(root, 30);

    preOrder(root); printf("\n");
    inOrder(root); printf("\n");
    postOrder(root); printf("\n");
    

    printf("%d ", findnode(root, 30)->key);
    

    /*
    printf("%d %d %d\n", getNodeCount(root), getLeafCount(root), getHight(root));

    root = deleteNode(root, 30); preOrder(root);
    root = deleteNode(root, 26); preOrder(root);
    root = deleteNode(root, 18); preOrder(root);
    */
    return 0;
}
